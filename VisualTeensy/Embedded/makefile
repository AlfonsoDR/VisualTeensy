#******************************************************************************
# Generated by VisualTeensy (https://github.com/luni64/VisualTeensy)
#
# Board              Teensy 3.2 / 3.1
# USB Type           Serial
# CPU Speed          72 MHz
# Optimize           Faster
# Keyboard Layout    US English
#
# 23.09.2018 11:17
#******************************************************************************

TARGET_NAME := new_project

BOARD_ID    := TEENSY31
CORE_BASE   := C:\PROGRA~1\Arduino\ARDUIN~1.5\hardware\teensy\avr\cores\teensy3
GCC_BASE    := C:\PROGRA~1\Arduino\ARDUIN~1.5\hardware\tools\arm
UPL_PJRC_B  := C:\PROGRA~1\Arduino\ARDUIN~1.5\hardware\tools
UPL_TYCMD_B := C:\PROGRA~1\TyTools

LIBRARIES	:=
# SPI  bounce2 

FLAGS_CPU   := -mthumb -mcpu=cortex-m4 -fsingle-precision-constant
FLAGS_OPT   := -O2
FLAGS_COM   := -g -Wall -ffunction-sections -fdata-sections -nostdlib -MMD
FLAGS_LSP   := 

FLAGS_CPP   := -fno-exceptions -felide-constructors -std=gnu++14 -Wno-error=narrowing -fno-rtti
FLAGS_C     := 
FLAGS_S     := -x assembler-with-cpp
FLAGS_LD    := -Wl,--gc-sections,--relax,--defsym=__rtc_localtime=0

LIBS        := -larm_cortexM4l_math -lm
LD_SCRIPT   := mk20dx256.ld

DEFINES     := -D__MK20DX256__ -DTEENSYDUINO=142 -DARDUINO
DEFINES     += -DF_CPU=72000000 -DUSB_SERIAL -DLAYOUT_US_ENGLISH

CPP_FLAGS   := $(FLAGS_CPU) $(FLAGS_OPT) $(FLAGS_COM) $(DEFINES) $(FLAGS_CPP)
C_FLAGS     := $(FLAGS_CPU) $(FLAGS_OPT) $(FLAGS_COM) $(DEFINES) $(FLAGS_C)
S_FLAGS     := $(FLAGS_CPU) $(FLAGS_OPT) $(FLAGS_COM) $(DEFINES) $(FLAGS_S)
LD_FLAGS    := $(FLAGS_CPU) $(FLAGS_OPT) $(FLAGS_LSP) $(FLAGS_LD)
AR_FLAGS    := rcs

USR_SRC     := src
LIB_SRC		:= lib
CORE_SRC    := $(CORE_BASE)

BIN         := bin
USR_BIN     := $(BIN)/src
CORE_BIN    := $(BIN)/core
LIB_BIN	    := $(BIN)/lib
CORE_LIB    := $(BIN)/core.a
TARGET_HEX  := $(BIN)\$(TARGET_NAME).hex
TARGET_ELF  := $(BIN)\$(TARGET_NAME).elf
TARGET_LST  := $(BIN)\$(TARGET_NAME).lst 



#******************************************************************************
# BINARIES
#******************************************************************************
CC          := $(GCC_BASE)/bin/arm-none-eabi-gcc
CXX         := $(GCC_BASE)\bin\arm-none-eabi-g++
AR          := $(GCC_BASE)\bin\arm-none-eabi-gcc-ar
OBJCOPY     := $(GCC_BASE)\bin\arm-none-eabi-objcopy
SIZE        := $(GCC_BASE)\bin\arm-none-eabi-size
OBJDUMP     := $(GCC_BASE)\bin\arm-none-eabi-objdump
UPL_PJRC    := "$(UPL_PJRC_B)\teensy_post_compile" -test -file=$(TARGET_NAME) -path=$(BIN) -tools="$(UPL_PJRC_B)" -board=$(BOARD_ID) -reboot
UPL_TYCMD   := $(UPL_TYCMD_B)\tyCommanderC upload $(TARGET_HEX) --autostart

#******************************************************************************
# Source and Include Files
#******************************************************************************
# Recursively create list of source and object files in USR_SRC and CORE_SRC 
# and corresponding subdirectories. 
# The function rwildcard is taken from http://stackoverflow.com/a/12959694)

rwildcard =$(wildcard $1$2) $(foreach d,$(wildcard $1*),$(call rwildcard,$d/,$2))

#User Sources -----------------------------------------------------------------
USR_C_FILES    := $(call rwildcard,$(USR_SRC)/,*.c)
USR_CPP_FILES  := $(call rwildcard,$(USR_SRC)/,*.cpp)
USR_S_FILES    := $(call rwildcard,$(USR_SRC)/,*.S)
USR_OBJ        := $(USR_S_FILES:$(USR_SRC)/%.S=$(USR_BIN)/%.o) $(USR_C_FILES:$(USR_SRC)/%.c=$(USR_BIN)/%.o) $(USR_CPP_FILES:$(USR_SRC)/%.cpp=$(USR_BIN)/%.o) 

# Core library sources --------------------------------------------------------
CORE_CPP_FILES := $(call rwildcard,$(CORE_SRC)/,*.cpp)
CORE_C_FILES   := $(call rwildcard,$(CORE_SRC)/,*.c)
CORE_OBJ       := $(CORE_S_FILES:$(CORE_SRC)/%.S=$(CORE_BIN)/%.o) $(CORE_C_FILES:$(CORE_SRC)/%.c=$(CORE_BIN)/%.o) $(CORE_CPP_FILES:$(CORE_SRC)/%.cpp=$(CORE_BIN)/%.o) 

# User library sources --------------------------------------------------------
LS             := $(foreach d, $(LIBRARIES),$(LIB_SRC)/$d)
LIB_CPP_FILES  := $(foreach d, $(LS),$(call rwildcard,$d/,*.cpp))
LIB_C_FILES    := $(foreach d, $(LS),$(call rwildcard,$d/,*.c))
LIB_S_FILES    := $(foreach d, $(LS),$(call rwildcard,$d/,*.S))
LIB_OBJ        :=  $(LIB_CPP_FILES:$(LIB_SRC)/%.cpp=$(LIB_BIN)/%.o) $(LIB_C_FILES:$(LIB_SRC)/%.cpp=$(LIB_BIN)/%.o) $(LIB_S_FILES:$(LIB_SRC)/%.cpp=$(LIB_BIN)/%.o) 

INCLUDE        := -I.\$(USR_SRC) -I$(CORE_SRC) 
INCLUDE		   += $(foreach d, $(LIBRARIES), -I.\$(LIB_SRC)\$d)

#$(info LIB_cpp: ${LIB_CPP_FILES})
#$(info LIB_OBJ: ${LIB_OBJ})
#$(info INFO: ${INCLUDE})


#******************************************************************************
# Rules:
#******************************************************************************

.PHONY: all rebuild upload uploadTy clean cleanUser cleanCore

all:     $(TARGET_LST) $(TARGET_HEX)
rebuild: cleanUser all
clean:   cleanUser cleanCore cleanLib

upload: $(TARGET_LST) $(TARGET_HEX)
	@$(UPL_PJRC)

uploadTy: $(TARGET_LST) $(TARGET_HEX)
	@$(UPL_TYCMD)

# Core library ----------------------------------------------------------------
$(CORE_BIN)/%.o: $(CORE_SRC)/%.S
	@echo CORE [ASM] $(notdir $<)
	@if not exist $(dir $@)  @mkdir "$(dir $@)"
	@"$(CC)" $(S_FLAGS) $(INCLUDE) -o $@ -c $< 

$(CORE_BIN)/%.o: $(CORE_SRC)/%.c
	@echo CORE [CC]  $(notdir $<)
	@if not exist $(dir $@)  @mkdir "$(dir $@)"
	@"$(CC)" $(C_FLAGS) $(INCLUDE) -o $@ -c $< 

$(CORE_BIN)/%.o: $(CORE_SRC)/%.cpp
	@echo CORE [CPP] $(notdir $<)
	@if not exist $(dir $@)  @mkdir "$(dir $@)"
	@"$(CXX)" $(CPP_FLAGS) $(INCLUDE) -o $@ -c $< 

$(CORE_LIB) : $(CORE_OBJ)
	@echo CORE [AR]  $@
	@$(AR) $(AR_FLAGS) $@ $^
	@echo Teensy core built successfully &&echo.

# Libraries -------------------------------------------------------------------
$(LIB_BIN)/%.o: $(LIB_SRC)/%.cpp
	@echo LIB [CPP] LIB  $<
	@if not exist $(dir $@)  @mkdir "$(dir $@)"
	@"$(CXX)" $(CPP_FLAGS) $(INCLUDE) -o $@ -c $< 

$(LIB_BIN)/%.o: $(LIB_SRC)/%.c
	@echo CORE [CC]  $(notdir $<)
	@if not exist $(dir $@)  @mkdir "$(dir $@)"
	@"$(CC)" $(C_FLAGS) $(INCLUDE) -o $@ -c $< 

# Handle user sources ---------------------------------------------------------
$(USR_BIN)/%.o: $(USR_SRC)/%.S
	@echo USER [ASM] $<
	@if not exist $(dir $@)  @mkdir "$(dir $@)"
	@"$(CC)" $(S_FLAGS) $(INCLUDE) -o $@ -c $<

$(USR_BIN)/%.o: $(USR_SRC)/%.c
	@echo USER [CC]  $(notdir $<)
	@if not exist $(dir $@)  @mkdir "$(dir $@)"
	@"$(CC)" $(C_FLAGS) $(INCLUDE) -o "$@" -c $<

$(USR_BIN)/%.o: $(USR_SRC)/%.cpp
	@echo USER [CPP] $(notdir $<)
	@if not exist $(dir $@)  @mkdir "$(dir $@)"
	@"$(CXX)" $(CPP_FLAGS) $(INCLUDE) -o "$@" -c $<

# Linking ---------------------------------------------------------------------
$(TARGET_ELF): $(CORE_OBJ) $(LIB_OBJ) $(USR_OBJ) 
	@echo [LD]  $@
	@$(CC) $(LD_FLAGS) -T$(CORE_SRC)/$(LD_SCRIPT) -o "$@" $(USR_OBJ) $(LIB_OBJ) $(CORE_OBJ) $(LIBS)
	@echo User code built and linked to core lib &&echo.

%.lst: %.elf
	@echo [LST] $(notdir $@)
	@$(OBJDUMP) -d -S --demangle --no-show-raw-insn --syms "$<"  > "$@"
	@echo Listfile generated &&echo.

%.hex: %.elf
	@echo [HEX] $@
	@$(SIZE) "$<"
	@$(OBJCOPY) -O ihex -R.eeprom "$<" "$@"
	@echo Sucessfully built project &&echo.

# Cleaning --------------------------------------------------------------------
cleanUser:
	@echo Cleaning user binaries...
	@if exist $(USR_BIN) rd /s/q "$(USR_BIN)"

	@if exist $(TARGET_HEX) del  $(TARGET_HEX)
	@if exist $(TARGET_ELF) del  $(TARGET_ELF)
	@if exist $(TARGET_LST) del  $(TARGET_LST)

cleanCore:
	@echo Cleaning core binaries...
	@if exist $(CORE_BIN) rd /s/q "$(CORE_BIN)"
	@if exist $(CORE_LIB) del  "$(CORE_LIB)"

cleanLib:
	@echo Cleaning user library binaries...
	@if exist $(LIB_BIN) rd /s/q "$(LIB_BIN)"
	

# compiler generated dependency info ------------------------------------------
-include $(CORE_OBJ:.o=.d)
-include $(USR_OBJ:.o=.d)
-include $(LI_OBJ:.o=.d)
